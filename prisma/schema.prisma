generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ------------------------
/// Определяем Prisma enum
/// ------------------------
enum enum_message_templates_type {
  email
  sms
}

enum enum_product_images_image_type {
  main
  thumbnail
  gallery
  icon
}

enum enum_order_addresses_type {
  billing
  shipping
}

enum enum_products_unit_type {
  piece
  weight
  volume
  length
  package
  digital
  service
}

enum enum_promotions_discount_type {
  percentage
  fixed_amount
  free_shipping
  buy_x_get_y
}

enum enum_attributes_value_type {
  text
  number
  // при необходимости добавь другие: json, number, etc.
}

model migrations {
  id        Int    @id(map: "PK_8c82d7f526340ab734260ea46be") @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar
}

/// -----------------------
/// Модель сущностей
/// -----------------------
model Entity {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  statuses        Status[]
  defaultStatuses DefaultStatus[]
  auditLogs       AuditLog[]
}

/// -----------------------
/// Модель статусов
/// -----------------------
model Status {
  id          Int     @id @default(autoincrement())
  entityId    Int
  entity      Entity  @relation(fields: [entityId], references: [id], onDelete: Restrict)
  name        String  @unique
  color       String  @default("#000000")
  description String?

  // Cвязи со многими моделями, где в схемах прописан FK на statuses.id
  users           User[]
  products        Product[]
  orders          Order[]
  transactions    Transaction[]
  paymentMethods  PaymentMethod[]
  shippingMethods ShippingMethod[]
  promotions      Promotion[]
  defaultStatuses DefaultStatus[]
}

/// -----------------------
/// Таблица "дефолтных" статусов
/// -----------------------
model DefaultStatus {
  entityId Int
  statusId Int

  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  status Status @relation(fields: [statusId], references: [id], onDelete: Cascade)

  @@id([entityId, statusId])
}

/// -----------------------
/// Модель пользователей
/// -----------------------
model User {
  id                         Int       @id @default(autoincrement())
  username                   String    @unique
  email                      String    @unique
  email_verified             Boolean   @default(false)
  password_hash              String
  statusId                   Int
  status_set_at              DateTime?
  status_set_until           DateTime?
  status_set_by              Int?
  created_at                 DateTime  @default(now())
  last_login_at              DateTime?
  login_attempts             Int       @default(0)
  email_verification_token   String?
  email_verification_expires DateTime?
  two_factor_auth_enable     Boolean   @default(false)
  first_name                 String?
  last_name                  String?
  phone_code                 String?
  phone_number               String?
  phone_verified             Boolean   @default(false)

  /// Связь на статус
  status Status @relation(fields: [statusId], references: [id], onDelete: Restrict)

  /// Самоссылка: кто установил статус?
  statusSetByUser User? @relation("UserStatusSetBy", fields: [status_set_by], references: [id], onDelete: SetNull)

  setStatusForUsers User[] @relation("UserStatusSetBy")

  /// Связи на многие другие модели
  userRoles           UserRole[]
  userPasswordHistory UserPasswordHistory[]
  productsCreated     Product[]             @relation("ProductCreatedBy")
  categoriesCreated   Category[]            @relation("CategoryCreatedBy")
  attributesCreated   Attribute[]           @relation("AttributeCreatedBy")
  errorLogs           ErrorLog[]
  pageViews           PageView[]
  auditLogs           AuditLog[]
  carts               Cart[]
  orders              Order[]
  productReviews      ProductReview[]
  userWishlists       UserWishlist[]
  conversionEvents    ConversionEvent[]
  settingsSet         Setting[]             @relation("SettingLastSetBy")
  promotionUsers      PromotionUser[]

  @@index([statusId])
  @@index([phone_number])
}

/// -----------------------
/// Роли пользователей (user_roles)
/// -----------------------
model UserRole {
  user_id Int
  role_id Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
}

/// -----------------------
/// История паролей (user_password_history)
/// -----------------------
model UserPasswordHistory {
  id                Int      @id @default(autoincrement())
  user_id           Int
  old_password_hash String
  changed_at        DateTime @default(now())
  reason            String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

/// -----------------------
/// Роли (roles)
/// -----------------------
model Role {
  id                Int  @id @default(autoincrement())
  name_tx_id        Int
  description_tx_id Int?

  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

/// -----------------------
/// Разрешения (permissions)
/// -----------------------
model Permission {
  id                Int  @id @default(autoincrement())
  name_tx_id        Int
  description_tx_id Int?

  rolePermissions RolePermission[]
}

/// -----------------------
/// Связка ролей и разрешений (role_permissions)
/// -----------------------
model RolePermission {
  role_id       Int
  permission_id Int

  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
}

/// -----------------------
/// Товары (products)
/// -----------------------
model Product {
  id                Int                     @id @default(autoincrement())
  slug              String                  @unique
  price             Decimal                 @db.Decimal(10, 2)
  unit_type         enum_products_unit_type
  unit_name_tx_id   Int
  status_id         Int
  name_tx_id        Int
  description_tx_id Int?
  created_at        DateTime                @default(now())
  updated_at        DateTime                @default(now())
  created_by        Int?

  status        Status @relation(fields: [status_id], references: [id], onDelete: Restrict)
  createdByUser User?  @relation("ProductCreatedBy", fields: [created_by], references: [id], onDelete: SetNull)

  productImages     ProductImage[]
  productReviews    ProductReview[]
  productVariants   ProductVariant[]
  productTags       ProductTag[]
  productCategories ProductCategory[]
  promotionProducts PromotionProduct[]
  userWishlists     UserWishlist[]

  @@index([status_id])
  @@index([created_at])
  @@index([name_tx_id])
  @@index([price])
}

/// -----------------------
/// Изображения товаров (product_images)
/// -----------------------
model ProductImage {
  id         Int                            @id @default(autoincrement())
  product_id Int
  image_url  String
  image_type enum_product_images_image_type
  sort_order Int                            @default(0)
  created_at DateTime                       @default(now())

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

/// -----------------------
/// Отзывы (product_reviews)
/// -----------------------
model ProductReview {
  id         Int      @id @default(autoincrement())
  product_id Int
  user_id    Int
  rating     Int
  comment    String?
  lang_id    Int
  created_at DateTime @default(now())
  likes      Int      @default(0)
  dislikes   Int      @default(0)

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lang    Lang    @relation(fields: [lang_id], references: [id], onDelete: Cascade)
}

/// -----------------------
/// Теги (tags)
/// -----------------------
model Tag {
  id         Int    @id @default(autoincrement())
  name_tx_id Int
  slug       String @unique

  productTags ProductTag[]
}

/// -----------------------
/// Связка товары - теги (product_tags)
/// -----------------------
model ProductTag {
  product_id Int
  tag_id     Int

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([product_id, tag_id])
}

/// -----------------------
/// Категории (categories)
/// -----------------------
model Category {
  id              Int     @id @default(autoincrement())
  slug            String  @unique
  parent_id       Int?
  name_tx_id      Int
  sort_order      Int?    @default(0)
  for_adults_only Boolean @default(false)
  created_by      Int?

  parent   Category?  @relation("CategoryParent", fields: [parent_id], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryParent")

  createdByUser User? @relation("CategoryCreatedBy", fields: [created_by], references: [id], onDelete: SetNull)

  productCategories   ProductCategory[]
  promotionCategories PromotionCategory[]
}

/// -----------------------
/// Связка товары - категории (product_categories)
/// -----------------------
model ProductCategory {
  product_id  Int
  category_id Int

  product  Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([product_id, category_id])
}

/// -----------------------
/// Атрибуты (attributes)
/// -----------------------
model Attribute {
  id         Int                        @id @default(autoincrement())
  name_tx_id Int
  value_type enum_attributes_value_type
  created_by Int?

  createdByUser     User?              @relation("AttributeCreatedBy", fields: [created_by], references: [id], onDelete: SetNull)
  productAttributes ProductAttribute[]
}

/// -----------------------
/// Варианты товаров (product_variants)
/// -----------------------
model ProductVariant {
  id                 Int      @id @default(autoincrement())
  product_id         Int
  available_quantity Decimal? @default("0") @db.Decimal(10, 3)
  is_default         Boolean  @default(false)

  product           Product            @relation(fields: [product_id], references: [id], onDelete: Cascade)
  productAttributes ProductAttribute[]
  warehouseStocks   WarehouseStock[]
  orderItems        OrderItem[]
  cartItems         CartItem[]
}

/// -----------------------
/// Значения атрибутов (product_attributes)
/// -----------------------
model ProductAttribute {
  id                        Int      @id @default(autoincrement())
  product_variant_id        Int
  attribute_id              Int
  attribute_value           String
  attribute_label_tx_id     Int?
  attribute_unit_type_tx_id Int?
  is_variant                Boolean  @default(false)
  price_modifier            Decimal? @db.Decimal(10, 2)

  productVariant ProductVariant @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  attribute      Attribute      @relation(fields: [attribute_id], references: [id], onDelete: Restrict)
}

/// -----------------------
/// Склады (warehouses)
/// -----------------------
model Warehouse {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  address_id   Int
  phone_code   String?
  phone_number String?
  email        String   @unique
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  address Address @relation(fields: [address_id], references: [id], onDelete: Restrict)

  warehouseStocks WarehouseStock[]
}

/// -----------------------
/// Наличие на складах (warehouse_stock)
/// -----------------------
model WarehouseStock {
  id                 Int      @id @default(autoincrement())
  warehouse_id       Int
  product_variant_id Int
  quantity_on_hand   Decimal  @default("0") @db.Decimal(10, 3)
  reserved_quantity  Decimal  @default("0") @db.Decimal(10, 3)
  updated_at         DateTime @default(now())

  warehouse      Warehouse      @relation(fields: [warehouse_id], references: [id], onDelete: Restrict)
  productVariant ProductVariant @relation(fields: [product_variant_id], references: [id], onDelete: Restrict)
}

/// -----------------------
/// Заказы (orders)
/// -----------------------
model Order {
  id                 Int      @id @default(autoincrement())
  user_id            Int?
  total_amount       Decimal  @db.Decimal(10, 2)
  status_id          Int
  created_at         DateTime @default(now())
  shipping_method_id Int?

  user           User?           @relation(fields: [user_id], references: [id], onDelete: SetNull)
  status         Status          @relation(fields: [status_id], references: [id], onDelete: Restrict)
  shippingMethod ShippingMethod? @relation(fields: [shipping_method_id], references: [id], onDelete: SetNull)

  orderItems      OrderItem[]
  promotionUsages PromotionUsage[]
  transactions    Transaction[]
  orderAddresses  OrderAddress[]
}

/// -----------------------
/// Применённые промо (promotion_usages)
/// -----------------------
model PromotionUsage {
  order_id     Int
  promotion_id Int

  order     Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  promotion Promotion @relation(fields: [promotion_id], references: [id], onDelete: Cascade)

  @@id([order_id, promotion_id])
}

/// -----------------------
/// Транзакции (transactions)
/// -----------------------
model Transaction {
  id                Int      @id @default(autoincrement())
  order_id          Int
  payment_method_id Int?
  gateway_txn_id    String?  @unique
  payment_reference String?  @unique
  amount            Decimal  @default("0.00") @db.Decimal(10, 2)
  currency          String   @default("USD")
  status_id         Int
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  ip_address        String?
  error_message     String?
  gateway_response  String?
  config            Json?

  order         Order          @relation(fields: [order_id], references: [id], onDelete: Restrict)
  paymentMethod PaymentMethod? @relation(fields: [payment_method_id], references: [id], onDelete: SetNull)
  status        Status         @relation(fields: [status_id], references: [id], onDelete: Restrict)
}

/// -----------------------
/// Методы оплаты (payment_methods)
/// -----------------------
model PaymentMethod {
  id                Int      @id @default(autoincrement())
  config            Json?
  status_id         Int
  name              String   @unique
  description_tx_id Int?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  status       Status        @relation(fields: [status_id], references: [id], onDelete: Restrict)
  transactions Transaction[]
}

/// -----------------------
/// Методы доставки (shipping_methods)
/// -----------------------
model ShippingMethod {
  id                 Int     @id @default(autoincrement())
  name_tx_id         Int
  description_tx_id  Int?
  price              Decimal @default("0.00") @db.Decimal(10, 2)
  delivery_time_days Int     @default(0)
  status_id          Int

  status Status  @relation(fields: [status_id], references: [id], onDelete: Restrict)
  orders Order[]
}

/// -----------------------
/// Адреса (addresses)
/// -----------------------
model Address {
  id            Int     @id @default(autoincrement())
  country       String
  city          String
  state         String
  address_line1 String
  address_line2 String?
  postal_code   String

  warehouses     Warehouse[]
  orderAddresses OrderAddress[]
}

/// -----------------------
/// Адреса заказов (order_addresses)
/// -----------------------
model OrderAddress {
  id         Int                       @id @default(autoincrement())
  order_id   Int
  type       enum_order_addresses_type
  first_name String
  last_name  String
  address_id Int

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  address Address @relation(fields: [address_id], references: [id], onDelete: Restrict)
}

/// -----------------------
/// Позиции заказа (order_items)
/// -----------------------
model OrderItem {
  id                 Int     @id @default(autoincrement())
  order_id           Int
  product_variant_id Int
  quantity           Decimal @default("1") @db.Decimal(10, 3)
  price_each         Decimal @db.Decimal(10, 2)
  subtotal           Decimal @db.Decimal(10, 2)
  product_snapshot   Json?

  order          Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  productVariant ProductVariant @relation(fields: [product_variant_id], references: [id], onDelete: Restrict)
}

/// -----------------------
/// Шаблоны сообщений (message_templates)
/// -----------------------
model MessageTemplate {
  id         Int                         @id @default(autoincrement())
  type       enum_message_templates_type
  name       String
  subject    String
  body       String
  variables  Json?
  created_at DateTime                    @default(now())
  updated_at DateTime                    @default(now())
}

/// -----------------------
/// Корзины (carts)
/// -----------------------
model Cart {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  session_id String?  @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user      User?      @relation(fields: [user_id], references: [id], onDelete: SetNull)
  cartItems CartItem[]
}

/// -----------------------
/// Позиции корзины (cart_items)
/// -----------------------
model CartItem {
  id                 Int      @id @default(autoincrement())
  cart_id            Int
  product_variant_id Int
  quantity           Decimal  @default("1") @db.Decimal(10, 3)
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())

  cart           Cart           @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  productVariant ProductVariant @relation(fields: [product_variant_id], references: [id], onDelete: Restrict)
}

/// -----------------------
/// Логи аудита (audit_logs)
/// -----------------------
model AuditLog {
  id             Int      @id @default(autoincrement())
  user_id        Int?
  action         String
  ip_address     String?
  created_at     DateTime @default(now())
  changes        Json?
  entity_type_id Int?
  entity_id      Int?

  user        User?   @relation(fields: [user_id], references: [id], onDelete: SetNull)
  entity_type Entity? @relation(fields: [entity_type_id], references: [id], onDelete: SetNull)
}

/// -----------------------
/// Логи ошибок (error_logs)
/// -----------------------
model ErrorLog {
  id            Int      @id @default(autoincrement())
  error_message String
  error_code    String
  file          String?
  line          Int?
  stacktrace    String?
  user_id       Int?
  created_at    DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
}

/// -----------------------
/// Статистика просмотров (page_views)
/// -----------------------
model PageView {
  id         Int      @id @default(autoincrement())
  page_url   String
  user_id    Int?
  visitor_ip String
  referrer   String?
  user_agent String?
  created_at DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
}

/// -----------------------
/// Метрики производительности (performance_metrics)
/// -----------------------
model PerformanceMetric {
  id           Int      @id @default(autoincrement())
  metric_name  String
  metric_value Decimal  @db.Decimal(10, 2)
  measured_at  DateTime @default(now())
}

/// -----------------------
/// События конверсии (conversion_events)
/// -----------------------
model ConversionEvent {
  id               Int      @id @default(autoincrement())
  event_name_tx_id Int
  user_id          Int?
  details_tx_id    Int?
  created_at       DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
}

/// -----------------------
/// Настройки (settings)
/// -----------------------
model Setting {
  setting_key   String  @id
  setting_value String?
  description   String?
  label         String  @unique
  last_set_by   Int?

  lastSetByUser User? @relation("SettingLastSetBy", fields: [last_set_by], references: [id], onDelete: SetNull)
}

/// -----------------------
/// Языки (langs)
/// -----------------------
model Lang {
  id                  Int     @id @default(autoincrement())
  lang_code           String
  lang_flag_image_url String?

  productReviews ProductReview[]
  translations   Translation[]
}

/// -----------------------
/// Переводы (translations)
/// (композитный PK: (id, lang_id))
/// -----------------------
model Translation {
  id      Int
  lang_id Int
  value   String

  lang Lang @relation(fields: [lang_id], references: [id], onDelete: Cascade)

  @@id([id, lang_id])
}

/// -----------------------
/// Промоакции (promotions)
/// -----------------------
model Promotion {
  id                Int                           @id @default(autoincrement())
  name_tx_id        Int
  description_tx_id Int?
  promo_code        String?                       @unique
  discount_type     enum_promotions_discount_type
  discount_value    Decimal                       @default("0.00") @db.Decimal(10, 2)
  min_order_amount  Decimal?                      @default("0.00") @db.Decimal(10, 2)
  start_date        DateTime?
  end_date          DateTime?
  usage_limit       Int?
  times_used        Int                           @default(0)
  status_id         Int
  created_at        DateTime                      @default(now())
  updated_at        DateTime                      @default(now())

  status              Status              @relation(fields: [status_id], references: [id], onDelete: Restrict)
  promotionProducts   PromotionProduct[]
  promotionCategories PromotionCategory[]
  promotionUsers      PromotionUser[]
  promotionUsages     PromotionUsage[]
}

/// -----------------------
/// Связка промо - товары (promotion_products)
/// -----------------------
model PromotionProduct {
  promotion_id Int
  product_id   Int

  promotion Promotion @relation(fields: [promotion_id], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([promotion_id, product_id])
}

/// -----------------------
/// Связка промо - категории (promotion_categories)
/// -----------------------
model PromotionCategory {
  promotion_id Int
  category_id  Int

  promotion Promotion @relation(fields: [promotion_id], references: [id], onDelete: Cascade)
  category  Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([promotion_id, category_id])
}

/// -----------------------
/// Связка промо - пользователи (promotion_users)
/// -----------------------
model PromotionUser {
  promotion_id Int
  user_id      Int

  promotion Promotion @relation(fields: [promotion_id], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([promotion_id, user_id])
}

/// -----------------------
/// Список желаний (user_wishlists)
/// -----------------------
model UserWishlist {
  product_id Int
  user_id    Int
  created_at DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([product_id, user_id])
}
